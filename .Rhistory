install.packages("KernSmooth")
Library("KernSmooth")
library("KernSmooth")
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x.rm
x <- 1:10
if(x > 5) {
x <- 0
}
x
rm.x
rm(x)
x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
library(datasets)
data(iris)
str(iris)
summary(iris)
class(iris)
lapply(split(iris,iris$Species),mean)
str(gl)
x <- iris$Species
x
gl(x)
ir <- iris
gl(ir,x)
head(iris)
lapply(ir, mean)
lapply(ir$Sepal.Length, mean)
l1 <- lapply(ir$Sepal.Length, mean)
str(aggregate.data.frame)
aggregate.data.frame(ir, ir$Species, mean, simplify = True)
aggregate.data.frame(ir, x, mean, simplify = True)
aggregate.data.frame(ir, "Species", mean, simplify = True)
str(seq)
?seq
split(iris,list(iris$Species))
lapply(split(iris,list(iris$Species)), mean)
l1 <- lapply(split(iris,list(iris$Species)), mean, na.rm = T)
str(iris)
sp <- split(iris,list(iris$Species))
sp
sp[1]
head(sp[1])
head(sp[1],1)
sp[2]
sp[3]
sp$virginica
class(sp$virginica)
str(colMeans)
?colMeans
colMeans(sp$virginica, rm.na = T)
(sp$virginica)$Sepal.Length
colMeans((sp$virginica)$Sepal.Length, rm.na = TRUE)
colMeans((sp$virginica)$Sepal.Length, na.rm = TRUE)
lapply(list((sp$virginica)$Sepal.Length), mean)
lapply(list((sp$virginica)$Sepal.Length), mean, na.rm = TRUE)
colMeans(ir)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
iris[, 1:4]
head(iris[, 1:4])
data(mtcars)
rm(mtcars)
library(datasets)
data(mtcars)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
str(mtcars)
with(mtcars, tapply(mpg, cyl, mean)) ##Correct to get avg per cyl type
d = with(mtcars, tapply(mpg, cyl, mean))
d$4 - d$8
d[1] - d[8]
d[1] - d[3]
d = with(mtcars, tapply(hp, cyl, mean))
d
absolute(d[1] - d[3])
abs(d[1] - d[3])
(d[1] - d[3])
str(abs)
?abs
d
abs(d[1] - d[3])
setwd(C:/Users/rudy/Documents/GitHub/ProgrammingAssignment2)
setwd("C:/Users/rudy/Documents/GitHub/ProgrammingAssignment2")
getwd()
?matrix
m1 <- matrix(1:4, nrow = 2, ncol = 2)
m1
source(m1)
?source
?solve
